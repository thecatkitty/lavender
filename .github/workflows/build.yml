name: Build

on:
  pull_request:
    branches: [main]
  push:
    tags: [0.*]

env:
  APT_HOST: zip
  APT_TARGET_LINUX: libsdl2-dev libsdl2-ttf-dev libfontconfig-dev libfluidsynth-dev libblkid-dev libcurl4-openssl-dev
  APT_TARGET_DOS: gcc-ia16-elf libi86-ia16-elf
  WINGET_HOST: GnuWin32.Zip

jobs:
  Build:
    name: Build for ${{ matrix.platform.name }}

    runs-on: ${{ matrix.platform.host }}
    strategy:
      matrix:
        platform:
          - name: DOS 2.0+ (IA16, COM)
            target: dos-ia16-com
            apts: $APT_TARGET_DOS
            prepare-script: .github/prepare-dos.sh
            fetch-script: .github/fetch-dos.sh i8088
            flags: -DCMAKE_TOOLCHAIN_FILE=ext/nicetia16-i8088/cmake/DOS-GCC-IA16.cmake -DDOS_TARGET_COM=1
            config: tiny
            host: ubuntu-22.04
            single-language: true

          - name: DOS 3.0+ (IA16, EXE)
            target: dos-ia16-exe
            apts: $APT_TARGET_DOS
            prepare-script: .github/prepare-dos.sh
            fetch-script: .github/fetch-dos.sh i8088
            flags: -DCMAKE_TOOLCHAIN_FILE=ext/nicetia16-i8088/cmake/DOS-GCC-IA16.cmake
            host: ubuntu-22.04

          - name: DOS 3.0+ (IA16 with XMS)
            target: dos-ia16x
            apts: $APT_TARGET_DOS
            prepare-script: .github/prepare-dos.sh
            fetch-script: .github/fetch-dos.sh i286
            flags: -DCMAKE_TOOLCHAIN_FILE=ext/nicetia16-i286/cmake/DOS-GCC-IA16.cmake -DDOS_TARGET_XMS=1
            host: ubuntu-22.04

          - name: Linux
            target: linux
            apts: $APT_TARGET_LINUX
            host: ubuntu-latest

          - name: Windows (IA32)
            target: windows-ia32
            fetch-script: .github/fetch-mingw.sh ia32
            cc: i686-w64-mingw32-gcc
            flags: -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_EXE_LINKER_FLAGS=-L$GITHUB_WORKSPACE/ext/bulwa/i686-w64-mingw32/lib -DLAV_ARD=1
            host: ubuntu-latest

          - name: Windows (x64)
            target: windows-x64
            fetch-script: .github/fetch-mingw.sh
            cc: x86_64-w64-mingw32-gcc
            flags: -DCMAKE_SYSTEM_NAME=Windows -DWINVER=0x0502
            host: ubuntu-latest

          - name: Windows (ARM)
            target: windows-arm
            fetch-script: .github/fetch-mingw.sh
            cc: armv7-w64-mingw32-gcc
            flags: -DCMAKE_SYSTEM_NAME=Windows -DWINVER=0x0602
            host: ubuntu-latest

          - name: Windows (ARM64)
            target: windows-arm64
            fetch-script: .github/fetch-mingw.sh
            cc: aarch64-w64-mingw32-gcc
            flags: -DCMAKE_SYSTEM_NAME=Windows -DWINVER=0x0A00
            host: ubuntu-latest

          - name: Windows (IA64)
            target: windows-ia64
            fetch-script: .\.github\fetch-winsdk.ps1
            env-script: . .\.github\enter-winsdk.ps1
            flags: -G "NMake Makefiles" -DWINVER=0x0501 -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS_DEBUG="/Zi /Ob0 /Od" -DCMAKE_CXX_COMPILER_FORCED=TRUE "-DCMAKE_RC_COMPILER=C:/Program Files (x86)/Windows Kits/10/bin/10.0.26100.0/x64/rc.exe"
            host: windows-2025

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
  
      - name: Prepare Ubuntu host
        if: startsWith(matrix.platform.host, 'ubuntu')
        run: |
          ${{ matrix.platform.prepare-script }}
          sudo apt update
          sudo apt install $APT_HOST ${{ matrix.platform.apts }} -y
  
      - name: Prepare Windows host
        if: startsWith(matrix.platform.host, 'windows')
        run: |
          ${{ matrix.platform.prepare-script }}
          "C:\Program Files (x86)\GnuWin32\bin" | Out-File -Encoding utf8 -Append $env:GITHUB_PATH
          winget install $env:WINGET_HOST --accept-source-agreements

      - name: Fetch dependencies
        run: |
          ${{ matrix.platform.fetch-script }}
          git fetch --depth=1 origin "+refs/tags/*:refs/tags/*"

      - name: Build multi language target
        if: ${{!matrix.platform.single-language}}
        env:
          CC: ${{ matrix.platform.cc }}
          KCONFIG_CONFIG: ${{ matrix.platform.config }}.config
        run: |
          ${{matrix.platform.env-script}}
          cmake -S . -B build -DCMAKE_INSTALL_PREFIX=bin/${{ matrix.platform.target }} ${{ matrix.platform.flags }}
          cmake --build build --config Release
          cmake --build build -t bundle --config Release
          cmake --install build --config Release

      - name: Build single language targets
        if: matrix.platform.single-language
        env:
          CC: ${{ matrix.platform.cc }}
          KCONFIG_CONFIG: ${{ matrix.platform.config }}.config
        run: |
          ${{matrix.platform.env-script}}
          for lang in cs-cz en-us pl-pl
          do
            cmake -S . -B build -DCMAKE_INSTALL_PREFIX=bin/${{ matrix.platform.target }}/$lang -DLAV_LANG=$lang ${{ matrix.platform.flags }}
            cmake --build build -t bundle --config Release
            cmake --install build --config Release
          done

      - name: Prepare release info
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          git tag -l --format='%(contents:subject)' ${{ github.ref_name }} | sed -r "s/^.+: //" > bin/RELEASE.md
  
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lavender-${{ matrix.platform.target }}
          path: |
            bin

  Test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare Ubuntu host
        run: |
          sudo apt update
          sudo apt install $APT_HOST $APT_TARGET_LINUX -y

      - name: Run unit tests
        run: |
          cmake -S . -B build
          cmake --build build -t test

  Release:

    runs-on: ubuntu-latest
    needs: Build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Fetch build output
        uses: actions/download-artifact@v4
          
      - name: Prepare archives
        run: |
          cd lavender-dos-ia16-com  && zip -r ../lavender-${{ github.ref_name }}-dos-com.zip       * && cd ..
          cd lavender-dos-ia16-exe  && zip -r ../lavender-${{ github.ref_name }}-dos-exe.zip       * && cd ..
          cd lavender-dos-ia16x     && zip -r ../lavender-${{ github.ref_name }}-dos-ia16x.zip     * && cd ..
          cd lavender-windows-ia32  && zip -r ../lavender-${{ github.ref_name }}-windows-ia32.zip  * && cd ..
          cd lavender-windows-x64   && zip -r ../lavender-${{ github.ref_name }}-windows-x64.zip   * && cd ..
          cd lavender-windows-arm   && zip -r ../lavender-${{ github.ref_name }}-windows-arm.zip   * && cd ..
          cd lavender-windows-arm64 && zip -r ../lavender-${{ github.ref_name }}-windows-arm64.zip * && cd ..
          cd lavender-windows-ia64  && zip -r ../lavender-${{ github.ref_name }}-windows-ia64.zip  * && cd ..

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: Version ${{ github.ref_name }}
          body_path: lavender-dos-ia16-com/RELEASE.md
          files: |
            lavender-${{ github.ref_name }}-dos-com.zip
            lavender-${{ github.ref_name }}-dos-exe.zip
            lavender-${{ github.ref_name }}-dos-ia16x.zip
            lavender-${{ github.ref_name }}-windows-ia32.zip
            lavender-${{ github.ref_name }}-windows-x64.zip
            lavender-${{ github.ref_name }}-windows-arm.zip
            lavender-${{ github.ref_name }}-windows-arm64.zip
            lavender-${{ github.ref_name }}-windows-ia64.zip
